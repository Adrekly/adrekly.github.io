---
import ErrorModal from "./ErrorModal.astro";
import SuccessModal from "./SuccessModal.astro";
---

<div
  id="hireServiceModalFade"
  class="fixed top-0 left-0 inset-0 hidden justify-center size-full z-50"
>
  <div
    id="hireServiceModal"
    class="bg-white rounded-md dark:bg-gray-950 w-80 xs:w-96 sm:w-[512px] md:w-[640px] flex flex-col p-6 h-fit mt-16"
  >
    <div class="flex justify-between items-center">
      <h2
        class="font-semibold text-xl sm:text-2xl text-gray-950 dark:text-white"
      >
        Schedule Meeting
      </h2>
      <button
        title="Close Modal"
        aria-label="Close Modal"
        id="closeScheduleMeetingModal"
        class="p-2 rounded-md text-gray-900 dark:text-white"
        ><svg
          aria-label="Close Modal Icon"
          class="size-6"
          fill="currentColor"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 384 512"
        >
          <path
            d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"
          ></path></svg
        ></button
      >
    </div>
    <form id="scheduleMeetingForm" class="mt-4 flex flex-col gap-4">
      <div class="flex flex-col gap-2">
        <label for="email" class="text-gray-700 dark:text-gray-300"
          >Your Email</label
        >
        <input
          class="text-gray-700 dark:text-gray-300 border border-gray-400 rounded-md focus:outline-hidden focus:ring-1 focus:ring-blue-500 p-2 bg-gray-50 dark:bg-gray-950/20 dark:border-neutral-800"
          id="email"
          name="email"
          type="email"
          required
        />
      </div>
      <div class="flex flex-col gap-2">
        <label for="message" class="text-gray-700 dark:text-gray-300"
          >Leave me a message (optional)</label
        >
        <textarea
          class="text-gray-700 dark:text-gray-300 border border-gray-400 rounded-md focus:outline-hidden focus:ring-1 focus:ring-blue-500 p-2 bg-gray-50 dark:bg-gray-950/20 dark:border-neutral-800"
          rows="6"
          name="message"
          id="message"></textarea>
      </div>
      <button
        type="submit"
        class="w-full p-2 text-white font-semibold bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 focus:ring-4 focus:outline-hidden focus:ring-blue-300 rounded-md dark:bg-blue-700 dark:hover:bg-blue-800 dark:focus:ring-blue-950 transition-all duration-300"
      >
        Schedule
      </button>
    </form>
  </div>
</div>
<div
  id="hireServiceModalBackdrop"
  class="hidden fixed top-0 left-0 inset-0 z-40 bg-gray-950/50"
>
</div>
<SuccessModal />
<ErrorModal />
<script>
  import {
    showModal,
    hideModal,
    toggleModalFade,
    MODAL_ANIMATION_DURATION_IN_MILLISECONDS,
  } from "../utils/modal";

  window.addEventListener("DOMContentLoaded", () => {
    const hireServiceButtons = document.getElementsByClassName(
      "hireServiceButton"
    ) as HTMLCollectionOf<HTMLElement>;

    for (const button of hireServiceButtons) {
      button.addEventListener("click", () => {
        localStorage.setItem("currentServiceId", button.dataset.serviceId!);

        toggleModalFade("hireServiceModal");
        showModal("#hireServiceModal");
      });
    }

    const closeModalBtn = document.getElementById("closeScheduleMeetingModal");

    if (closeModalBtn instanceof HTMLButtonElement) {
      closeModalBtn.addEventListener("click", hideHireServiceModal);
    }

    const scheduleMeetingForm = document.getElementById("scheduleMeetingForm");

    if (scheduleMeetingForm instanceof HTMLFormElement) {
      scheduleMeetingForm.addEventListener("submit", async (e) => {
        e.preventDefault();

        const serviceId = localStorage.getItem("currentServiceId")!;
        const formData = new FormData(scheduleMeetingForm);
        formData.append("serviceId", serviceId);

        /* const res = await fetch(`/api/services/hire`, {
          method: "POST",
          body: formData,
          headers: {
            "Content-Type": "multipart/form-data",
          },
        }); */

        hideHireServiceModal();

        const res = {
          ok: undefined,
        };

        if (res.ok) {
          toggleModalFade("successModal");
          showModal("#successModal");
        } else {
          toggleModalFade("errorModal");
          showModal("#errorModal");
        }

        scheduleMeetingForm.reset();
      });
    }

    function hideHireServiceModal() {
      hideModal("#hireServiceModal");
      setTimeout(
        () => toggleModalFade("hireServiceModal"),
        MODAL_ANIMATION_DURATION_IN_MILLISECONDS
      );
    }
  });
</script>
